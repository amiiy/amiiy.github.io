<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Amiy!</title><link>https://amiy.me/posts/</link><description>Recent content in Posts on Amiy!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Mar 2022 18:16:54 +0400</lastBuildDate><atom:link href="https://amiy.me/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Serverless #1</title><link>https://amiy.me/posts/serverless/</link><pubDate>Sun, 06 Mar 2022 18:16:54 +0400</pubDate><guid>https://amiy.me/posts/serverless/</guid><description>Recently I got a chance to work on a ETL pipeline that import users data from another company into our platform. they had a legacy Microsoft SQL Server running from 2009 !
the propose to send the user data with Azure Data Pipeline. I suggested to implement a webhook and send it over HTTPS but thier team doesn&amp;rsquo;t seem to willing to do that so :(
So basically we need to pull the data in a time interval (1 min) in order to find out is there new user record to import or not.</description></item><item><title>Using Swagger to Develop APIs</title><link>https://amiy.me/posts/using-swagger/</link><pubDate>Thu, 28 Feb 2019 08:00:00 +0000</pubDate><guid>https://amiy.me/posts/using-swagger/</guid><description>Recently, I started taking a real look into using swagger to document REST APIs. I feel like REST APIs can be very hard to convey from a producer to a consumer, and there is often a bit of confusion as to how the response will be returned, or what is required in a request to an endpoint. This article attempts to explain how swagger works from a schema standpoint, what one can do with swagger to improve a REST API.</description></item><item><title>Troubleshooting HTTP with tcpdump in Docker</title><link>https://amiy.me/posts/troubleshooting-http-with-tcpdump-in-docker/</link><pubDate>Thu, 30 Aug 2018 08:00:00 +0000</pubDate><guid>https://amiy.me/posts/troubleshooting-http-with-tcpdump-in-docker/</guid><description>Today I decided to focus on something I take for granted, that possibly many other backend developers may not have ever used to help troubleshoot problems: tcpdump and wireshark. Coming from a systems and networking background into a software development role, I have used capture for troubleshooting networked applications I have developed. Today I will try to explain how you can setup a development environment that will allow you to use these tools to troubleshoot your application.</description></item></channel></rss>